// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

// Auto-generated initialization code.

final jniEnv = jni.Jni.env;
final jniAccessors = jni.Jni.accessors;

/// from: com.github.dart_lang.jnigen.benchmark.MainActivity
class MainActivity extends jni.JObject {
  @override
  late final jni.JObjType $type = type;

  MainActivity.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors
      .getClassOf(r"com/github/dart_lang/jnigen/benchmark/MainActivity");

  /// The type which includes information such as the signature of this class.
  static const type = $MainActivityType();
  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory MainActivity() {
    return MainActivity.fromRef(
        jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
  }

  static final _id_configureFlutterEngine = jniAccessors.getMethodIDOf(
      _classRef,
      r"configureFlutterEngine",
      r"(Lio/flutter/embedding/engine/FlutterEngine;)V");

  /// from: public void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine flutterEngine)
  void configureFlutterEngine(
    jni.JObject flutterEngine,
  ) {
    return jniAccessors.callMethodWithArgs(
        reference,
        _id_configureFlutterEngine,
        jni.JniCallType.voidType,
        [flutterEngine.reference]).check();
  }

  static final _id_getInteger =
      jniAccessors.getStaticMethodIDOf(_classRef, r"getInteger", r"()I");

  /// from: static public int getInteger()
  static int getInteger() {
    return jniAccessors.callStaticMethodWithArgs(
        _classRef, _id_getInteger, jni.JniCallType.intType, []).integer;
  }

  static final _id_getStringOfLength = jniAccessors.getStaticMethodIDOf(
      _classRef, r"getStringOfLength", r"(I)Ljava/lang/String;");

  /// from: static public java.lang.String getStringOfLength(int n)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JString getStringOfLength(
    int n,
  ) {
    return const jni.JStringType().fromRef(jniAccessors
        .callStaticMethodWithArgs(_classRef, _id_getStringOfLength,
            jni.JniCallType.objectType, [jni.JValueInt(n)]).object);
  }

  static final _id_getOrigin = jniAccessors.getStaticMethodIDOf(
      _classRef,
      r"getOrigin",
      r"()Lcom/github/dart_lang/jnigen/benchmark/MainActivity$Coordinate;");

  /// from: static public com.github.dart_lang.jnigen.benchmark.MainActivity.Coordinate getOrigin()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MainActivity_Coordinate getOrigin() {
    return const $MainActivity_CoordinateType().fromRef(jniAccessors
        .callStaticMethodWithArgs(
            _classRef, _id_getOrigin, jni.JniCallType.objectType, []).object);
  }

  static final _id_getMidPoint = jniAccessors.getStaticMethodIDOf(
      _classRef,
      r"getMidPoint",
      r"(Lcom/github/dart_lang/jnigen/benchmark/MainActivity$Coordinate;Lcom/github/dart_lang/jnigen/benchmark/MainActivity$Coordinate;)Lcom/github/dart_lang/jnigen/benchmark/MainActivity$Coordinate;");

  /// from: static public com.github.dart_lang.jnigen.benchmark.MainActivity.Coordinate getMidPoint(com.github.dart_lang.jnigen.benchmark.MainActivity.Coordinate a, com.github.dart_lang.jnigen.benchmark.MainActivity.Coordinate b)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MainActivity_Coordinate getMidPoint(
    MainActivity_Coordinate a,
    MainActivity_Coordinate b,
  ) {
    return const $MainActivity_CoordinateType().fromRef(jniAccessors
        .callStaticMethodWithArgs(_classRef, _id_getMidPoint,
            jni.JniCallType.objectType, [a.reference, b.reference]).object);
  }

  static final _id_toUpperCase = jniAccessors.getStaticMethodIDOf(
      _classRef, r"toUpperCase", r"(Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String toUpperCase(java.lang.String text)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JString toUpperCase(
    jni.JString text,
  ) {
    return const jni.JStringType().fromRef(jniAccessors
        .callStaticMethodWithArgs(_classRef, _id_toUpperCase,
            jni.JniCallType.objectType, [text.reference]).object);
  }

  static final _id_max =
      jniAccessors.getStaticMethodIDOf(_classRef, r"max", r"(IIIIIIII)I");

  /// from: static public int max(int a, int b, int c, int d, int e, int f, int g, int h)
  static int max(
    int a,
    int b,
    int c,
    int d,
    int e,
    int f,
    int g,
    int h,
  ) {
    return jniAccessors
        .callStaticMethodWithArgs(_classRef, _id_max, jni.JniCallType.intType, [
      jni.JValueInt(a),
      jni.JValueInt(b),
      jni.JValueInt(c),
      jni.JValueInt(d),
      jni.JValueInt(e),
      jni.JValueInt(f),
      jni.JValueInt(g),
      jni.JValueInt(h)
    ]).integer;
  }
}

class $MainActivityType extends jni.JObjType<MainActivity> {
  const $MainActivityType();

  @override
  String get signature =>
      r"Lcom/github/dart_lang/jnigen/benchmark/MainActivity;";

  @override
  MainActivity fromRef(jni.JObjectPtr ref) => MainActivity.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MainActivityType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $MainActivityType && other is $MainActivityType;
  }
}

/// from: com.github.dart_lang.jnigen.benchmark.MainActivity$Coordinate
class MainActivity_Coordinate extends jni.JObject {
  @override
  late final jni.JObjType $type = type;

  MainActivity_Coordinate.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf(
      r"com/github/dart_lang/jnigen/benchmark/MainActivity$Coordinate");

  /// The type which includes information such as the signature of this class.
  static const type = $MainActivity_CoordinateType();
  static final _id_x = jniAccessors.getFieldIDOf(
    _classRef,
    r"x",
    r"I",
  );

  /// from: public int x
  int get x =>
      jniAccessors.getField(reference, _id_x, jni.JniCallType.intType).integer;

  /// from: public int x
  set x(int value) => jniEnv.SetIntField(reference, _id_x, value);

  static final _id_y = jniAccessors.getFieldIDOf(
    _classRef,
    r"y",
    r"I",
  );

  /// from: public int y
  int get y =>
      jniAccessors.getField(reference, _id_y, jni.JniCallType.intType).integer;

  /// from: public int y
  set y(int value) => jniEnv.SetIntField(reference, _id_y, value);

  static final _id_z = jniAccessors.getFieldIDOf(
    _classRef,
    r"z",
    r"I",
  );

  /// from: public int z
  int get z =>
      jniAccessors.getField(reference, _id_z, jni.JniCallType.intType).integer;

  /// from: public int z
  set z(int value) => jniEnv.SetIntField(reference, _id_z, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"(III)V");

  /// from: public void <init>(int x, int y, int z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory MainActivity_Coordinate(
    int x,
    int y,
    int z,
  ) {
    return MainActivity_Coordinate.fromRef(jniAccessors.newObjectWithArgs(
        _classRef,
        _id_ctor,
        [jni.JValueInt(x), jni.JValueInt(y), jni.JValueInt(z)]).object);
  }
}

class $MainActivity_CoordinateType
    extends jni.JObjType<MainActivity_Coordinate> {
  const $MainActivity_CoordinateType();

  @override
  String get signature =>
      r"Lcom/github/dart_lang/jnigen/benchmark/MainActivity$Coordinate;";

  @override
  MainActivity_Coordinate fromRef(jni.JObjectPtr ref) =>
      MainActivity_Coordinate.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MainActivity_CoordinateType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $MainActivity_CoordinateType &&
        other is $MainActivity_CoordinateType;
  }
}
